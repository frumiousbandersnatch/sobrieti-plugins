#+title: A somewhat compatible implementation of XKCD Bucket

* Goals

- Provide a supybot/limnoria plugin that acts similar to XKCD Bucket as documented [[http://sobrieti.bot.nu/pail/][here]].
- Use SQLite3 instead of MySQL
- Provide a converter from Bucket's MySQL schema to our SQLite3 schema

Why? Because I am sick of dealing with Perl and MySQL for ~pail~ on snoonet.

What does "compatible" mean? 

- Support the commands most used for defining factoids and giving times.
- Keep the "magic" variables (here called terms) with side effects.
- Keep (and increase) responses themselves driven by stored factoids.
- Keep some of the behavior (~say~, ~bad-ass~)

What does "somewhat" mean?

- A new DB schema is adopted which removes some underutilized things
  (like mostly unused dichotomy between ~name~ and ~type~ of ~bucket_vars~).
  A converter is provided but it's somewhat lossy.

- No attempt to retain as-is the "user commands" besides those
  described above (factoid/item definitions).  Similar ones are
  provided which reflect the different schema taxonomy and limnoria
  norms.

* User Manual

** Terms

The Bucket mostly contains simple information called /terms/.  A term is
some /text/ of a /kind/.  There can be many terms of a given kind.  Users
are free to add new kinds and new values for existing kinds, though
some kinds of terms are reserved for system use and special
permissions are needed to modify them.

The /text/ of a term may reference a kind of term by including ~$kind~.
For example, 

#+begin_example
I like $someone's $pet
#+end_example

If the Bucket uses this text in a reply then ~$someone~ will be replaced
with the nick of a recently active user and ~$pet~ will be replaced with
one of the /text/ from a term of /kind/ "pet".  The ~$someone~ is one of the
special system terms but ~$pet~ is one that can be created and added to
by anyone.

** Items

The Bucket is is bottomless in that it contains all it has been given.
But, it also "holds" certain things special.  These are called
"items" and are terms of the special ~item~ kind.

We may give the Bucket an item

#+begin_example
/me gives bucket a horse
#+end_example

And we may ask what items the Bucket holds

#+begin_example
bucket, inventory
<bucket> I have a horse.
#+end_example

And the Bucket may be generous if asked

#+begin_example
<me> bucket, give me a present
*bucket gives me a horse
#+end_example

The Bucket can only hold so many items and will drop one if given
another when full.  The Bucket can also be empty of held items.
Besides explicitly giving and receiving items, special system terms
can may used which have side effects on what the Bucket holds.

- ~$held~ :: resolves to a random held item (no side effect)

- ~$take~ :: resolves to a random item held in the past and as a side
  effect causes Bucket to now hold it again.

- ~$give~ :: resolves to a random held item and as a side effect causes
  Bucket to no longer hold it.

** Factoids

The other special terms that the Bucket may hold build up "factoids".
We may make a factoid like:

#+begin_example
<me> bucket, the moon is made of green cheese
#+end_example

A factoid is a relationship built from three special kinds of terms, a
~subject~ (~the moon~) a ~link~ (~is~) and a ~tidibit~ (~make of green cheese~).
The verbs "is" and "are" are specially identified as links and any
other links may be given as ~<link>~ such as:

#+begin_example
<me> bucket, cats <run> circles around dogs
#+end_example

A link is generally considered a verb.  Two special links are:

- ~<reply>~ :: When the factoid is triggered the Bucket replies with just the "tidbit".
- ~<action>~ :: Like ~<reply>~ but the Bucket responds with an action


* Operator manual


** Capabilities

In addition to usual command capabilities, the Bucket will respect
these capabilities to limit operations at content level:

- ~system~ :: May ~add~ or ~remove~ any (including system) factoids and
  terms.  System factoids need not be changed frequently and must
  follow certain rules as to their content and some expertise is
  needed.

- ~op~ :: May ~remove~ (non-system) factoids or force dropping of a
  specific item.  This may be exercised, for example, to remove
  factoids that are contrary to channel policy.




* Differences from XKCD Bucket

The usage of this bucket is but not exactly the same as the OG XKCD
bucket. 

** Special variables

Some =$= variables in a string can be replaced with things bucket knows.
Some of these variables can have side effects.  A few of these
variables have changed slightly from their XKCD bucket equivalents or
provide new functionality.

- =$item= :: any item previously given to the bot but not necessarily
  still "held" by the bot.  (No past equivalent.)

- =$held= :: an item currently held.  (Used to be =$item=)

- $take :: any item, bot will now hold it (Used to be =$newitem=)

- =$give= :: a held item, bot will drop it (Used to be =$giveitem=)

Users may define any "kind" of term and the name of the kind can be
used as a variable, eg =$item= will replace a term of kind ~item~.  

** Database schema

Besides switching from MySQL to SQLite3, the schema is made simpler
and unified.  The ~terms~ table provides kinds of text terms.  Eg one
kind is ~item~ which names things the bucket may have held at one time.
A fact is a triplet association of ~subject~, ~link~ (verb) and ~tidbit~.  

** Implementation

Perl is replaced with Python.  POE is replaced with supybot.


* Development roadmap

The bot is split into:

- plugin :: handles interfacing to supybot/limnoria IRC
- store :: interface to DB and basic functionality semantics but free from IRC
- prime :: some "system" facts and DB initialization
- dumpload :: utility to convert from XKCD Bucket MySQL DB to sqlite3 used by this bot

** Plugin

Pure plugin/IRC code for "special functions":

- [X] say it again
- [ ] sexchange. ex->sex replacement, 
- [ ] bad-ass thing, bad ass-thing replacement.

Those not listed are not in scope.

The plugin also is a translational barrier between IRC stuff and the
store.  It provides various regex based commands in addition to normal
supybot commands

- [ ] use auth capabilities to allow change to "system" fact subjects
- [ ] single way to prepare =more= parameters (~$who~, ~$someone~)
- [X] regex based "give items"
- [X] command: ~give~ 
- [X] command: ~inventory~
- [X] regex ~is~ / ~are~ fact definition
- [X] regex ~<reply>~ / ~<action>~ fact definition
- [X] regex ~<<verb>>~ fact definition
- [X] drop item if full
- [X] command: ~literal~ factoid list 
- [ ] command: editing factoid
- [ ] command: ~undo last~ factoid
- [ ] command: remember quote (requires keeping recent history)
- [ ] gender
- [ ] ~go away~ / ~come back~

** Store

- [X] schema init with triggers
- [X] singular idempotent term definition and id return
- [X] id->term lookup
- [X] term lookups by kind
- [X] term lookups by random
- [X] resolve ~$var~ variables, including with side effect
  - [X] random held, give, take
  - [X] random kind
- [X] singular idempotent factoid defintion and id return
- [X] variables (word class, user name, object, number)
- [X] variable interpolation
- [X] item deletion
- [X] factoid deletion
- [ ] factoid tidbit editing
- [ ] factoid tidbit selection

** Prime

- [X] default special replies
- [X] change these to "system" 
- [X] rationalize system factoid subject names

** Dump/load

- [X] basic MySQL access
- [X] understand and handle munged character encoding
- [X] facts 
- [X] items
- [X] vars
- [X] basic CLI
- [ ] nicer CLI with mysql parameters, controlling individual actions
